package dataaccesslayer;

import datatransferobjects.Task;
import java.util.ArrayList;
import java.util.List;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;


/**
 * Implementation class of TaskDao interface. Returns values for Task object via java implemented SQL queries.
 * @author AJang
 *
 */
public class TaskDaoImpl implements TaskDao {
	
	/**
	 * getAllTasks method used to return the entire table of database as a List of Task objects
	 */
	@Override
	public List<Task> getAllTasks(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<Task> tasks = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement("SELECT * FROM tasks");
			rs = pstmt.executeQuery();
			tasks = new ArrayList<Task>();
			while(rs.next()){
				Task task = new Task();
				task.setTaskId(new Integer(rs.getInt("TaskID")));
				task.setTitle(rs.getString("Title"));
				task.setPriority(rs.getString("Priority"));
				task.setIsComplete(rs.getBoolean("IsComplete"));
				task.setDateCompleted(rs.getDate("DateCompleted"));
				task.setNote(rs.getString("Note"));
				tasks.add(task);
			}
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			try{	if(rs!=null){rs.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{	if(pstmt !=null){pstmt.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{	if(con !=null){ con.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return tasks;
	}
	
	/**
	 * getTaskById method used to return single task entry from database as a Task object
	 */
	@Override
	public Task getTaskById(Integer taskId){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Task task = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement("SELECT * FROM tasks WHERE TaskID = ?");
			pstmt.setInt(1, taskId.intValue());
			rs = pstmt.executeQuery();
			while (rs.next()){
				task = new Task();
				task.setTaskId(new Integer(rs.getInt("TaskID")));
				task.setTitle(rs.getString("Title"));
				task.setPriority(rs.getString("Priority"));
				task.setIsComplete(rs.getBoolean("IsComplete"));
				task.setDateCompleted(rs.getDate("DateCompleted"));
				task.setNote(rs.getString("Note"));
			}
		}catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{	if(rs!=null){rs.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{	if(pstmt !=null){pstmt.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{	if(con !=null){ con.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return task;
	}
	
	/**
	 * addTask method used to use a Task object as reference to add an entry to table in database
	 */
	@Override
	public void addTask(Task task){
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"INSERT INTO tasks (Title, Priority, IsComplete, DateCompleted, Note) " + 
					"VALUES(?, ?, ?, null, ?)");
			pstmt.setString(1, task.getTitle());
			pstmt.setString(2, task.getPriority());
			pstmt.setBoolean(3, task.getIsComplete());
			pstmt.setString(4, task.getNote());
			pstmt.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			try{	if(pstmt !=null){pstmt.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{	if(con !=null){ con.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
	
	/**
	 * updateTask method used to find an entry in database table using primary key and using a task object as reference to update entry found by primary key query
	 */
	@Override
	public void updateTask(Task task){
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"UPDATE tasks SET Title = ?, " +
					"Priority = ?, IsComplete = ?, " +
					"DateCompleted = ?, Note = ? " +
					"WHERE TaskID = ?"
					);
			pstmt.setString(1, task.getTitle());
			pstmt.setString(2, task.getPriority());
			pstmt.setBoolean(3, task.getIsComplete());
			pstmt.setDate(4, task.getDateCompleted());
			pstmt.setString(5, task.getNote());
			pstmt.setInt(6, task.getTaskId().intValue());
			pstmt.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			try{	if(pstmt !=null){pstmt.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{	if(con !=null){ con.close();	}	}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
	/**
	 * deleteTask method used to delete entry in database table via primary key
	 */
	@Override
	public void deleteTask(Task task){
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM tasks WHERE TaskID = ?");
			pstmt.setInt(1, task.getTaskId().intValue());
			pstmt.executeUpdate();
	}catch(SQLException e){
		e.printStackTrace();
	}finally{
		try{	if(pstmt !=null){pstmt.close();	}	}
		catch(SQLException ex){System.out.println(ex.getMessage());}
		try{	if(con !=null){ con.close();	}	}
		catch(SQLException ex){System.out.println(ex.getMessage());}
	}
}
}
